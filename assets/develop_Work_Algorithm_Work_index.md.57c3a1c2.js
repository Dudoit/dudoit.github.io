import{_ as t,o as a,c as n,z as e,a as o}from"./chunks/framework.a3f41f98.js";const f=JSON.parse('{"title":"待定标题","description":"","frontmatter":{},"headers":[],"relativePath":"develop/Work+Algorithm/Work/index.md","filePath":"develop/Work+Algorithm/Work/index.md"}'),r={name:"develop/Work+Algorithm/Work/index.md"},l=e("h1",{id:"待定标题",tabindex:"-1"},[o("待定标题 "),e("a",{class:"header-anchor",href:"#待定标题","aria-label":'Permalink to "待定标题"'},"​")],-1),i=e("h2",{id:"如何验证用户身份",tabindex:"-1"},[o("如何验证用户身份 "),e("a",{class:"header-anchor",href:"#如何验证用户身份","aria-label":'Permalink to "如何验证用户身份"'},"​")],-1),s=e("ul",null,[e("li",null,[e("p",null,"用户先进行一个登录，登录后前端传给后端用户的账号和密码，然后从数据库中进行匹对，找到该用户的 ID，之后把这个 ID 用全局变量环境.env文件中配置的密钥进行一个签证令牌的操作，这时候 ID 就编程了加密后的 token，紧接着把 token 返回给前端浏览器，并把 token 存入本地存储localStore中做一个用户数据持久化。")]),e("li",null,[e("p",null,"之后我使用axios设置了一个请求头，从本地存储localStore中拿到token并放入请求头中，当用户每次发送一个请求时，后端服务器都会拿到这个token，再使用公钥进行一个解码拿到用户的ID，匹配数据库中相应的用户信息，从而完成了一个验证身份功能。")])],-1),d=[l,i,s];function c(h,_,p,k,m,u){return a(),n("div",null,d)}const v=t(r,[["render",c]]);export{f as __pageData,v as default};
