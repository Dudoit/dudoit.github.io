import{_ as a,o as e,c as t,O as r}from"./chunks/framework.51846e02.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview.md","filePath":"interview.md"}'),i={name:"interview.md"},o=r('<h2 id="js" tabindex="-1">JS <a class="header-anchor" href="#js" aria-label="Permalink to &quot;JS&quot;">​</a></h2><h3 id="_1-javascript-的内置类型" tabindex="-1">1. JavaScript 的内置类型 <a class="header-anchor" href="#_1-javascript-的内置类型" aria-label="Permalink to &quot;1. JavaScript 的内置类型&quot;">​</a></h3><h3 id="_2-判断数据类型的方法有哪些" tabindex="-1">2. 判断数据类型的方法有哪些？ <a class="header-anchor" href="#_2-判断数据类型的方法有哪些" aria-label="Permalink to &quot;2. 判断数据类型的方法有哪些？&quot;">​</a></h3><h3 id="_3-闭包" tabindex="-1">3. 闭包 <a class="header-anchor" href="#_3-闭包" aria-label="Permalink to &quot;3. 闭包&quot;">​</a></h3><h3 id="_4-原型-原型链" tabindex="-1">4. 原型 &amp; 原型链 <a class="header-anchor" href="#_4-原型-原型链" aria-label="Permalink to &quot;4. 原型 &amp; 原型链&quot;">​</a></h3><h3 id="_5-this" tabindex="-1">5. this <a class="header-anchor" href="#_5-this" aria-label="Permalink to &quot;5. this&quot;">​</a></h3><h3 id="_6-new" tabindex="-1">6. new <a class="header-anchor" href="#_6-new" aria-label="Permalink to &quot;6. new&quot;">​</a></h3><h3 id="_7-继承" tabindex="-1">7. 继承 <a class="header-anchor" href="#_7-继承" aria-label="Permalink to &quot;7. 继承&quot;">​</a></h3><h3 id="_8-eventloop" tabindex="-1">8. eventloop <a class="header-anchor" href="#_8-eventloop" aria-label="Permalink to &quot;8. eventloop&quot;">​</a></h3><h3 id="_9-ajax" tabindex="-1">9. AJAX <a class="header-anchor" href="#_9-ajax" aria-label="Permalink to &quot;9. AJAX&quot;">​</a></h3><h3 id="_10-instanceof-的原理" tabindex="-1">10. instanceof 的原理 <a class="header-anchor" href="#_10-instanceof-的原理" aria-label="Permalink to &quot;10. instanceof 的原理&quot;">​</a></h3><h3 id="_11-var、let、const-的区别" tabindex="-1">11. var、let、const 的区别 <a class="header-anchor" href="#_11-var、let、const-的区别" aria-label="Permalink to &quot;11. var、let、const 的区别&quot;">​</a></h3><h3 id="_12-箭头函数" tabindex="-1">12. 箭头函数 <a class="header-anchor" href="#_12-箭头函数" aria-label="Permalink to &quot;12. 箭头函数&quot;">​</a></h3><h3 id="_13-promise" tabindex="-1">13. promise <a class="header-anchor" href="#_13-promise" aria-label="Permalink to &quot;13. promise&quot;">​</a></h3><h3 id="_14-then-方法的第二个回调和-catch-有什么不同" tabindex="-1">14. then 方法的第二个回调和 catch 有什么不同 <a class="header-anchor" href="#_14-then-方法的第二个回调和-catch-有什么不同" aria-label="Permalink to &quot;14. then 方法的第二个回调和 catch 有什么不同&quot;">​</a></h3><h3 id="_15-async-await" tabindex="-1">15. async/await <a class="header-anchor" href="#_15-async-await" aria-label="Permalink to &quot;15. async/await&quot;">​</a></h3><h3 id="_16-class-关键字和-function-的区别" tabindex="-1">16. class 关键字和 function 的区别 <a class="header-anchor" href="#_16-class-关键字和-function-的区别" aria-label="Permalink to &quot;16. class 关键字和 function 的区别&quot;">​</a></h3><h3 id="_17-call" tabindex="-1">17. call <a class="header-anchor" href="#_17-call" aria-label="Permalink to &quot;17. call&quot;">​</a></h3><h3 id="_18-apply" tabindex="-1">18. apply <a class="header-anchor" href="#_18-apply" aria-label="Permalink to &quot;18. apply&quot;">​</a></h3><h3 id="_19-bind" tabindex="-1">19. bind <a class="header-anchor" href="#_19-bind" aria-label="Permalink to &quot;19. bind&quot;">​</a></h3><h3 id="_20-防抖" tabindex="-1">20. 防抖 <a class="header-anchor" href="#_20-防抖" aria-label="Permalink to &quot;20. 防抖&quot;">​</a></h3><h3 id="_21-节流" tabindex="-1">21. 节流 <a class="header-anchor" href="#_21-节流" aria-label="Permalink to &quot;21. 节流&quot;">​</a></h3><h3 id="_22-深拷贝" tabindex="-1">22. 深拷贝 <a class="header-anchor" href="#_22-深拷贝" aria-label="Permalink to &quot;22. 深拷贝&quot;">​</a></h3><h3 id="_23-promise-all" tabindex="-1">23. Promise.all <a class="header-anchor" href="#_23-promise-all" aria-label="Permalink to &quot;23. Promise.all&quot;">​</a></h3><h2 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h2><h3 id="_1-权重" tabindex="-1">1. 权重 <a class="header-anchor" href="#_1-权重" aria-label="Permalink to &quot;1. 权重&quot;">​</a></h3><h3 id="_2-伪类和伪元素" tabindex="-1">2. 伪类和伪元素 <a class="header-anchor" href="#_2-伪类和伪元素" aria-label="Permalink to &quot;2. 伪类和伪元素&quot;">​</a></h3><h3 id="_3-重排和重绘" tabindex="-1">3. 重排和重绘 <a class="header-anchor" href="#_3-重排和重绘" aria-label="Permalink to &quot;3. 重排和重绘&quot;">​</a></h3><h3 id="_4-z-index" tabindex="-1">4. z-index <a class="header-anchor" href="#_4-z-index" aria-label="Permalink to &quot;4. z-index&quot;">​</a></h3><h3 id="_5-盒模型" tabindex="-1">5. 盒模型 <a class="header-anchor" href="#_5-盒模型" aria-label="Permalink to &quot;5. 盒模型&quot;">​</a></h3><h3 id="_6-postion" tabindex="-1">6. postion <a class="header-anchor" href="#_6-postion" aria-label="Permalink to &quot;6. postion&quot;">​</a></h3><h3 id="_7-垂直居中" tabindex="-1">7. 垂直居中 <a class="header-anchor" href="#_7-垂直居中" aria-label="Permalink to &quot;7. 垂直居中&quot;">​</a></h3><h3 id="_8-bfc" tabindex="-1">8. BFC <a class="header-anchor" href="#_8-bfc" aria-label="Permalink to &quot;8. BFC&quot;">​</a></h3><h3 id="_9-清除浮动" tabindex="-1">9. 清除浮动 <a class="header-anchor" href="#_9-清除浮动" aria-label="Permalink to &quot;9. 清除浮动&quot;">​</a></h3><h3 id="_10-flex" tabindex="-1">10. Flex <a class="header-anchor" href="#_10-flex" aria-label="Permalink to &quot;10. Flex&quot;">​</a></h3><h3 id="_11-隐藏元素的方法" tabindex="-1">11. 隐藏元素的方法 <a class="header-anchor" href="#_11-隐藏元素的方法" aria-label="Permalink to &quot;11. 隐藏元素的方法&quot;">​</a></h3><h3 id="_12-自适应正方形" tabindex="-1">12 自适应正方形 <a class="header-anchor" href="#_12-自适应正方形" aria-label="Permalink to &quot;12 自适应正方形&quot;">​</a></h3><h3 id="_13-三角形" tabindex="-1">13. 三角形 <a class="header-anchor" href="#_13-三角形" aria-label="Permalink to &quot;13. 三角形&quot;">​</a></h3><h3 id="_14-浏览器兼容" tabindex="-1">14. 浏览器兼容 <a class="header-anchor" href="#_14-浏览器兼容" aria-label="Permalink to &quot;14. 浏览器兼容&quot;">​</a></h3>',39),h=[o];function l(n,s,d,c,_,u){return e(),t("div",null,h)}const f=a(i,[["render",l]]);export{q as __pageData,f as default};
