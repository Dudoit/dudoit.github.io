import{_ as a,o as e,c as s,O as p}from"./chunks/framework.51846e02.js";const T=JSON.parse('{"title":"性能优化开篇 - 从 5 个角度认识性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"develop/Performance/index.md","filePath":"develop/Performance/index.md"}'),n={name:"develop/Performance/index.md"},o=p(`<p>性能优化的意义</p><p>网站性能， 影响到用户参与度和用户留存，从而影响到转换率和业务收益。</p><h1 id="性能优化开篇-从-5-个角度认识性能优化" tabindex="-1">性能优化开篇 - 从 5 个角度认识性能优化 <a class="header-anchor" href="#性能优化开篇-从-5-个角度认识性能优化" aria-label="Permalink to &quot;性能优化开篇 - 从 5 个角度认识性能优化&quot;">​</a></h1><h2 id="思考从输入-url-到页面加载完成-发生了什么" tabindex="-1">思考从输入 URL 到页面加载完成，发生了什么？ <a class="header-anchor" href="#思考从输入-url-到页面加载完成-发生了什么" aria-label="Permalink to &quot;思考从输入 URL 到页面加载完成，发生了什么？&quot;">​</a></h2><p>一道经典的面试题，现在我们站在性能优化的角度，复习一下这个过程：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">1. 通过 DNS 将 URL 解析为对应的 IP 地址</span></span>
<span class="line"><span style="color:#A6ACCD;">2. 与这个 IP 地址的服务器建立 TCP 网络链接</span></span>
<span class="line"><span style="color:#A6ACCD;">3. 向服务端抛出 HTTP 请求</span></span>
<span class="line"><span style="color:#A6ACCD;">4. 服务端处理完成后将 HTTP 响应返回</span></span>
<span class="line"><span style="color:#A6ACCD;">5. 在浏览器上进行解析和渲染</span></span></code></pre></div><p>我们从这 5 个过程进行分解，分别优化</p><p>DNS 解析花时间，能不能尽量减少解析次数或者把解析前置？</p><p>TCP 每次的三次握手都急死人，有没有解决方案？</p><p>HTTP 减少请求次数和减小请求体积方面</p><p>浏览器资源加载优化、服务端渲染、浏览器缓存机制的利用、DOM 树的构建、网页排版和渲染过程、回流与重绘的考量、DOM 操作的合理规避</p><h2 id="如何提升页面加载速度" tabindex="-1">如何提升页面加载速度 <a class="header-anchor" href="#如何提升页面加载速度" aria-label="Permalink to &quot;如何提升页面加载速度&quot;">​</a></h2><p>图片资源的预加载，懒加载，cdn加速，雪碧图/精灵图</p><p>减少HTTP请求，尽可能的合并脚本，CSS，图像，在用户的浏览器上缓存文件</p><p>压缩JS文件，图片，HTML文档，CSS文档等等。用户可以下载较小的文件，增加网页的加载速度，这样可以降低服务器的消耗</p><p>去除不必要的空格, 注释 减少文件的总尺寸，较小的页面可以获得更快的加载速度</p><p>把CSS放在顶端: css文件的加载不会阻塞dom树的解析，把CSS文件放在网站的顶端，可以让网站尽可能同时加载其他部件，如图片和文字。</p><p>把js放在底端: 在body闭合标签前插入js脚本,让这些脚本在后台加载的同时，用户先得到看似完整的页面。</p><p>async异步 或 defer 推迟 加载js脚本</p><p>避免使用CSS表达式，如：calc</p><p>避免重定向:无论是服务器端头重定向，js重定向，或者HTML元素重定向。你的网站都会加载空白的页面的头， 然后再加载新的一页，用户为了获得需要的页面花费越来越多的时间</p><p>避免重定向:无论是服务器端头重定向，js重定向，或者HTML元素重定向。你的网站都会加载空白的页面的头， 然后再加载新的一页，用户为了获得需要的页面花费越来越多的时间</p>`,22),t=[o];function l(r,c,i,d,_,h){return e(),s("div",null,t)}const m=a(n,[["render",l]]);export{T as __pageData,m as default};
