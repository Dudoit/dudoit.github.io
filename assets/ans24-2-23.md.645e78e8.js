import{_ as a,o as t,c as e,O as o}from"./chunks/framework.51846e02.js";const m=JSON.parse('{"title":"JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"ans24-2-23.md","filePath":"ans24-2-23.md"}'),r={name:"ans24-2-23.md"},n=o('<h1 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h1><h2 id="javascript内置类型" tabindex="-1">JavaScript内置类型 <a class="header-anchor" href="#javascript内置类型" aria-label="Permalink to &quot;JavaScript内置类型&quot;">​</a></h2><p>基本类型：string number Boolean null undefined bigint symbol</p><p>引用类型：object</p><h2 id="判断数据类型的方法有哪些" tabindex="-1">判断数据类型的方法有哪些 <a class="header-anchor" href="#判断数据类型的方法有哪些" aria-label="Permalink to &quot;判断数据类型的方法有哪些&quot;">​</a></h2><p>typeof() instanceOf() toString.call()</p><h2 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h2><p>什么是闭包？ 闭包是指能够访问自由变量的函数，自由变量即作用域外的变量</p><p>作用：私有化（保护）变量、延长变量生命周期</p><p>用途：防抖、节流函数的定时器 ，Vue2的响应式原理</p><p>缺点：变量没有释放容易导致内存泄漏</p><p>内存泄漏要联系到垃圾回收机制，回收不用的变量，而闭包中的变量一直处于引用状态，则不会被回收，会一直保存在内存中，容易导致内存泄漏</p><p>及时释放变量，不用时给变量赋值 null</p><h2 id="原型-原型链" tabindex="-1">原型 &amp; 原型链 <a class="header-anchor" href="#原型-原型链" aria-label="Permalink to &quot;原型 &amp; 原型链&quot;">​</a></h2><p>对象的原型：每个对象上也都有原型 [[prototype]]，可以通过 <strong>proto</strong> 查看，还可以通过 Object.getOwnPrototype() 获取</p><p>函数的原型：函数上的原型，可以直接通过 Function.prototype 获取，Function.prototype.construtor 属性指向函数本身，在使用new构造函数时，构造函数所创建的对象的原型会被 Function.prototype 赋值，也就是 obj.__proto === Function.prototype</p><p>原型链是指</p>',17),p=[n];function i(c,s,l,h,d,_){return t(),e("div",null,p)}const b=a(r,[["render",i]]);export{m as __pageData,b as default};
