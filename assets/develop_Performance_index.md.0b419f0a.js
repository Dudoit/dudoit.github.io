import{_ as a,o as e,c as s,O as n}from"./chunks/framework.a3f41f98.js";const C=JSON.parse('{"title":"性能优化开篇 - 从 5 个角度认识性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"develop/Performance/index.md","filePath":"develop/Performance/index.md"}'),t={name:"develop/Performance/index.md"},o=n(`<h1 id="性能优化开篇-从-5-个角度认识性能优化" tabindex="-1">性能优化开篇 - 从 5 个角度认识性能优化 <a class="header-anchor" href="#性能优化开篇-从-5-个角度认识性能优化" aria-label="Permalink to &quot;性能优化开篇 - 从 5 个角度认识性能优化&quot;">​</a></h1><h2 id="思考从输入-url-到页面加载完成-发生了什么" tabindex="-1">思考从输入 URL 到页面加载完成，发生了什么？ <a class="header-anchor" href="#思考从输入-url-到页面加载完成-发生了什么" aria-label="Permalink to &quot;思考从输入 URL 到页面加载完成，发生了什么？&quot;">​</a></h2><p>一道经典的面试题，现在我们站在性能优化的角度，复习一下这个过程：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">1. 通过 DNS 将 URL 解析为对应的 IP 地址</span></span>
<span class="line"><span style="color:#A6ACCD;">2. 与这个 IP 地址的服务器建立 TCP 网络链接</span></span>
<span class="line"><span style="color:#A6ACCD;">3. 向服务端抛出 HTTP 请求</span></span>
<span class="line"><span style="color:#A6ACCD;">4. 服务端处理完成后将 HTTP 响应返回</span></span>
<span class="line"><span style="color:#A6ACCD;">5. 在浏览器上进行解析和渲染</span></span></code></pre></div><p>我们从这 5 个过程进行分解，分别优化</p><p>DNS 解析花时间，能不能尽量减少解析次数或者把解析前置？</p><p>TCP 每次的三次握手都急死人，有没有解决方案？</p><p>HTTP 减少请求次数和减小请求体积方面</p><p>浏览器资源加载优化、服务端渲染、浏览器缓存机制的利用、DOM 树的构建、网页排版和渲染过程、回流与重绘的考量、DOM 操作的合理规避</p>`,9),p=[o];function l(r,c,i,d,_,h){return e(),s("div",null,p)}const P=a(t,[["render",l]]);export{C as __pageData,P as default};
